{"componentChunkName":"component---src-templates-notes-js","path":"/java/jvm","result":{"data":{"markdownRemark":{"html":"<h2>Class Loading</h2>\n<h3>Loading and unloading of class</h3>\n<p>JVM reading class file into memory, and execute the java program, this is class loading. When JVM remove runtime class data, it is unloading.</p>\n<h3>Class Loading</h3>\n<ol>\n<li>Loading</li>\n<li>\n<p>Linking</p>\n<ol>\n<li>Verification</li>\n<li>Preparation</li>\n<li>Resolution</li>\n</ol>\n</li>\n<li>Initialization</li>\n</ol>\n<h4>Loading</h4>\n<p>read the binary data from .class file into memory (method area), and create <code class=\"language-text\">java.lang.Class</code> object in the heap. The class object encapsulates and provides access the data structures in method area.</p>\n<h4>Verification</h4>\n<p>make sure the binary data from .class file is according to the requirements and safe to JVM.</p>\n<p>verification includes:</p>\n<ul>\n<li>file format</li>\n<li>metadata</li>\n<li>bytecode</li>\n<li>symbolic reference</li>\n</ul>\n<h3></h3>\n<p>Class initialization is required in the following</p>\n<ul>\n<li>instantiation, accessing of static variable or calling static method</li>\n<li>reflective access</li>\n<li>when initializing a class and it's parent class is not yet initialized.</li>\n<li>when JVM start, user need to have a main class to execute.</li>\n<li>JDK 1.7, dynamic language support. java.lang.invoke.MethodHandle`</li>\n</ul>\n<h4>Classloader</h4>\n<ul>\n<li>\n<p>Bootstrap classloader</p>\n<ul>\n<li>c++ implementation</li>\n<li>part of JVM</li>\n<li>used by JVM for loading class needed by JVM. It's mainly responsible for loading JDK internal classes, typically rt.jar and other core libraries located in $JAVA_HOME/jre/lib</li>\n</ul>\n</li>\n<li>\n<p>Extension classloader</p>\n<ul>\n<li>java implementation</li>\n<li>extension class loader is a child of the bootstrap class loader and takes care of loading the extensions of the standard core Java classes. typically under $JAVA_HOME/lib/ext.</li>\n</ul>\n</li>\n<li>Extension class loader loads from the JDK extensions directory, usually $JAVA_HOME/lib/ext directory or any other directory mentioned in the java.ext.dirs system property.</li>\n<li>\n<p>System Class Loader</p>\n<ul>\n<li>takes care of loading all the application level classes into the JVM. It loads files found in the classpath environment variable, -classpath or -cp command line option.</li>\n<li>Also, it's a child of Extensions classloader.</li>\n</ul>\n</li>\n</ul>\n<p><code class=\"language-text\">java.lang.ClassLoader.loadClass()</code> method is responsible for loading the class definition into runtime.</p>\n<p>Delegation Model</p>\n<p>If the class isn't already loaded, it delegates the request to the parent class loader. This process happens recursively.</p>\n<p>Eventually, if the parent class loader doesnâ€™t find the class, then the child class will call java.net.URLClassLoader.findClass() method to look for classes in the file system itself.</p>\n<p>If the last child class loader isn't able to load the class either, it throws java.lang.NoClassDefFoundError or java.lang.ClassNotFoundException.</p>\n<ul>\n<li>loadClass</li>\n<li>defineClass</li>\n<li>-</li>\n</ul>\n<h2>References</h2>","frontmatter":{"title":"Java Virtual Machine (JVM)"},"parent":{"__typename":"File","modifiedTime":"2021-10-26T14:41:02.019Z"}}},"pageContext":{}}}