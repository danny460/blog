{"componentChunkName":"component---src-templates-notes-js","path":"/java/collection-framework","result":{"data":{"markdownRemark":{"html":"<h2>Strucutre</h2>\n<h2>List</h2>\n<h3>ArrayList</h3>\n<h2>Map</h2>\n<h3><code class=\"language-text\">HashMap</code></h3>\n<p>This is a binned (bucketed) hash table (array of linkedlists). However, when bins get too large, they are transformed into bins of TreeNodes (R-B Tree).</p>\n<h4>Bucket</h4>\n<p>hash table uses a hash function to compute an index, also called a <em>hash code</em>, into an array of <em>buckets</em>. Ideally the hash function will assign each key to a unique bucket, but practically most hash function have <em>hash collisions</em>.</p>\n<h4>Implementation</h4>\n<p>After JDK 1.8, the internall data structure is an array of linkedlist node, when the number of collision in the bucket exceeds a limit, the linkedlist is replaced with a red-black tree.</p>\n<p>hash function</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> <span class=\"token function\">hash</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> key<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span> h<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>key <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> <span class=\"token number\">0</span> <span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>h <span class=\"token operator\">=</span> key<span class=\"token punctuation\">.</span><span class=\"token function\">hashCode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">^</span> <span class=\"token punctuation\">(</span>h <span class=\"token operator\">>>></span> <span class=\"token number\">16</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>This spread the impact of higher bits downwards.</p>\n<p><strong>The length of internal array is power of 2</strong>, because it is used as a mask to get the bucket.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token punctuation\">(</span>n <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> hash <span class=\"token comment\">// n is the table length</span>\n<span class=\"token comment\">// n - 1 &amp; hash will give the mask to generate value from 0 to n - 1</span>\n<span class=\"token comment\">// this is like hash % n</span></code></pre></div>\n<p>when table size grow (based on a threshold decided by the capacity and load factor), rehashing of existing element is needed.</p>\n<h5><code class=\"language-text\">hashCode</code> and <code class=\"language-text\">equals</code></h5>\n<h5>Why is it not thread safe</h5>\n<p>Usually happens during resize. The state can be inconsistent.</p>\n<h3>ConcurrentHashMap</h3>","frontmatter":{"title":"Java Collection Framework"},"parent":{"__typename":"File","modifiedTime":"2021-10-26T14:41:02.019Z"}}},"pageContext":{}}}