{"version":3,"sources":["webpack:///./src/templates/notes.js","webpack:///./src/utils/getRelativeTime.js"],"names":["BlogTemplate","data","console","log","past","elapsed","markdownRemark","frontmatter","html","parent","title","modifiedTime","Layout","className","Date","getTime","now","Math","round","MS_PER_MINUTE","MS_PER_HOUR","MS_PER_DAY","dangerouslySetInnerHTML","__html","pageQuery"],"mappings":"yNAoBe,SAASA,EAAT,GAEX,IADFC,EACC,EADDA,KAEAC,QAAQC,IAAI,CAAEF,SADb,ICXqCG,EAChCC,EDYEC,EAAmBL,EAAnBK,eACAC,EAA8BD,EAA9BC,YAAaC,EAAiBF,EAAjBE,KAAMC,EAAWH,EAAXG,OAEnBC,EAAUH,EAAVG,MACAC,EAAiBF,EAAjBE,aACR,OACE,kBAACC,EAAA,EAAD,KACE,yBAAKC,UAAU,uBACb,yBAAKA,UAAU,aACb,4BAAKH,GACL,4BCvB8BN,EDuBV,IAAIU,KAAKH,GAAcI,WCtB7CV,EAAUS,KAAKE,MAAQZ,GAZT,IAeRa,KAAKC,MAAMb,EAAU,KAA/B,eACSA,EAfOc,KAgBNF,KAAKC,MAAMb,EAjBH,KAiBlB,eACSA,EAhBMe,MAiBLH,KAAKC,MAAMb,EAlBLc,MAkBhB,aACSd,EAjBQgB,OAkBX,SAAUJ,KAAKC,MAAMb,EAnBZe,OAmBf,YACSf,EAlBOgB,QAmBV,SAAUJ,KAAKC,MAAMb,EApBVgB,QAoBjB,cAEM,SAAUJ,KAAKC,MAAMb,EArBXgB,SAqBhB,eDUM,yBACER,UAAU,oBACVS,wBAAyB,CAAEC,OAAQf,QAQxC,IAAMgB,EAAS","file":"component---src-templates-notes-js-d8a721f12764927d7a7b.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { graphql } from 'gatsby';\nimport Layout from '../components/Layout';\nimport getRelativeTime from '../utils/getRelativeTime';\n\nBlogTemplate.propTypes = {\n  data: PropTypes.shape({\n    markdownRemark: PropTypes.shape({\n      frontmatter: PropTypes.shape({\n        title: PropTypes.string.isRequired,\n      }),\n      html: PropTypes.string.isRequired,\n      parent: PropTypes.shape({\n        modifiedTime: PropTypes.string.isRequired,\n      }),\n    }),\n  }),\n};\n\nexport default function BlogTemplate({\n  data, // this prop will be injected by the GraphQL query below.\n}) {\n  console.log({ data });\n  const { markdownRemark } = data; // data.markdownRemark holds your post data\n  const { frontmatter, html, parent } = markdownRemark;\n\n  const { title } = frontmatter;\n  const { modifiedTime } = parent;\n  return (\n    <Layout>\n      <div className=\"blog-post-container\">\n        <div className=\"blog-post\">\n          <h1>{title}</h1>\n          <p>{getRelativeTime(new Date(modifiedTime).getTime())}</p>\n          <div\n            className=\"blog-post-content\"\n            dangerouslySetInnerHTML={{ __html: html }}\n          />\n        </div>\n      </div>\n    </Layout>\n  );\n}\n\nexport const pageQuery = graphql`\n  query($path: String!) {\n    markdownRemark(frontmatter: { path: { eq: $path } }) {\n      html\n      frontmatter {\n        title\n      }\n      parent {\n        ... on File {\n          modifiedTime\n        }\n      }\n    }\n  }\n`;\n","const MS_PER_MINUTE = 60 * 1000;\nconst MS_PER_HOUR = MS_PER_MINUTE * 60;\nconst MS_PER_DAY = MS_PER_HOUR * 24;\nconst MS_PER_MONTH = MS_PER_DAY * 30;\nconst MS_PER_YEAR = MS_PER_DAY * 365;\n\n/**\n * return human friendly relative time from javascript date object\n * @param {number} past the date to convert, in millis\n * @returns {string} relative time\n */\nexport default function getRelativeTime(past) {\n  const elapsed = Date.now() - past;\n\n  if (elapsed < MS_PER_MINUTE) {\n    return `${Math.round(elapsed / 1000)} seconds ago`;\n  } else if (elapsed < MS_PER_HOUR) {\n    return `${Math.round(elapsed / MS_PER_MINUTE)} minutes ago`;\n  } else if (elapsed < MS_PER_DAY) {\n    return `${Math.round(elapsed / MS_PER_HOUR)} hours ago`;\n  } else if (elapsed < MS_PER_MONTH) {\n    return `about ${Math.round(elapsed / MS_PER_DAY)} days ago`;\n  } else if (elapsed < MS_PER_YEAR) {\n    return `about ${Math.round(elapsed / MS_PER_MONTH)} months ago`;\n  } else {\n    return `about ${Math.round(elapsed / MS_PER_YEAR)} years ago`;\n  }\n}\n"],"sourceRoot":""}